
Building the Puppet Environment

Discover the basic concepts of automated configuration with Puppet. Explore the installation and configuration of Puppet in the cloud and advanced server configuration.

Table of Contents

    Understanding and Installing Puppet
    Installing Puppet Master on AWS EC2
    Installing a Puppet Agent on AWS EC2
    Getting It All to Work
    Using the Facter Commands
    Using Core Puppet Facts
    Using Custom Facts
    Using the FACTERLIB Variable
    Using External Facts
    Exercise: Use Puppet

Understanding and Installing Puppet

[Topic title: Understanding and Installing Puppet. The presenter is Bob Hendry.] Let's learn about Puppet. Puppet is an automated configuration management tool. [Understanding Puppet.] What it allows you to do is allows you to write software to configure your physical or your logical servers. And it provides a standard way to deliver infrastructure. In the past or maybe even in the present, you have dozens or maybe hundreds or thousands of servers and you probably have different ways that you configure them, mostly manual. What Puppet allows you to do is it allows you to configure all your servers in a standardized way, really by pressing a button. It allows repeatable steps in configuring servers, so you don't have to configure each one manually and have debugging manual. And you don't have to allow manual steps in configuring your servers.

And Puppet is considered a DevOps tool. It integrates well with other DevOps tools such as Jira and Confluence, and it supports multiple platforms and price levels. You can have Puppet running on Windows machines, Linux machines, and you could have a few servers going or even thousands of servers going and there's a price level just for you.

[Core Puppet Components.] Now here, let's talk about the five core Puppet components. Now at the core we have the Puppet language. Now the Puppet language allows us to write code to do the configuration for what are called Puppet agents. Now the Puppet agents are nodes, server nodes that connect to a Puppet master and get via the Puppet language a configuration. So the second bullet we have is a Puppet Server. The Puppet Server is also called the Puppet master. The Puppet master is at the center of this whole topology. And what the Puppet master does is it holds the configuration and when the Puppet agents connect, it serves the configuration. Now all of this is kept in the PuppetDB. This is a database that keeps all the configuration for all the Puppet agents.

Now we also have Facter. What Facter is, is the utility that maintains what are basically environment variables for the whole topology. So we can set environment variables. We can create them. We can create custom ones and we can create external ones. And then we have Hiera. What Hiera does is it allows us to take our configuration and separate it from the values that we're going to apply to it. Basically taking any hard-coded values out of our configuration and making it more modular.

[Cloud Management.] So what does Puppet really allow us to do? It really allows us cloud management of our whole infrastructure. So what we can do is we can take our whole infrastructure and virtualize it if we want, and we could run it and configure it in the cloud. And we could do it in automated way and not in manual way, thus eliminating any kind of errors that we might have in the manual process. Now with this automation, it supports a lot of different providers such as Amazon, Microsoft and tools such as VMware and also Google.

In Puppet, what we can do is we can define our own configurations and therefore have a repeatable process that each of our servers will get when we want to configure a server. So we could spin up a virtual server very quickly and have it configured in an automated process. So Puppet Enterprise lets us manage our Infrastructure as Code. So rather than going through each server one at a time and perform the configuration, what we can do is we can codify that configuration and have Puppet apply that code and configure our servers and basically when we spin up environments, do it automatically. So what it does is it unifies our virtual, our physical, and our cloud environments all in one process that can easily be maintained.

[Puppet Versions.] In the current release, there's really two different versions of Puppet that you need to be concerned with. We have Puppet Enterprise and we have open source Puppet. Now Puppet Enterprise is the flagship Puppet stack. What that includes is it includes a supported versions of Puppet agent, Puppet master. It's got reporting tools. It has community support. It has technical support. It has all the bells and whistles of the Puppet infrastructure.

We also have open source Puppet. Now open source Puppet is more for the daring. It has the open source available to you so you can make changes and you can manage your topology. But it also requires you to have some deep knowledge of the engineering of your topology and how Puppet actually works. It's really not for the timid. It's free. You can download it. You could run it, but you're probably going to have some sort of issue in actually getting this thing to actually work perfectly. So for the most part, Puppet Enterprise is what you want to be running because this is the out-of-the-box Puppet version that most people are using.

[Installing Puppet.] Here let's talk about Puppet installation. So basically when you think about Puppet installation, you could really install it wherever you like. If you want to run it in the cloud for example, there's different paid services that you can do this with such as Amazon Web Services, or AWS, has a really, really good quick start stack guide that just basically will provision a whole Puppet infrastructure almost at a click of a button.

A similar we have DigitalOcean and Microsoft Azure where you can use these services to spin up Puppet instances and you could add to it from there. Also we have Bring Your Own Server. If you have your old fashioned brick and mortar physical server, you can also install Puppet master and all your Puppet agents on those as well.

And if you're using DevOps tools such as Docker and Vagrant, we have different flavors of running Puppet in Docker or Vagrant, but basically Puppet integrates well with these virtualization tools and these other DevOps tools like we have here with Docker and Vagrant. So depending on what your infrastructure needs are and what's available to you, you probably will be able to install Puppet without any problem.
Installing Puppet Master on AWS EC2

[Topic title: Installing Puppet Master on AWS EC2. The presenter is Bob Hendry.] In this video, I'm going to show you how you can from scratch, boot up an instance of Puppet master. We're going to use Amazon Web Services EC2 to do so. There are some premade templates that we can use that'll easily help us boot up an instance of Puppet master. [The aws.amazon.com web site opens.] Now there's different options you can use, but EC2 is an easy way that we're going to use in this demonstration. So the first thing that you need to do, if you don't already have an Amazon Web Services account, you need to create one. Now I'm bringing you here to the aws.amazon.com site. Now here what you can do is you could go and create an account if you don't already have one. Now it's kind of intuitive how to do so, so we're just going to log in to my existing account. [He clicks the My Account drop-down list.] And I'm going to show you the steps on how we can boot up an instance of Puppet master. [He clicks the AWS Management Console option from the drop-down list.]

So the first thing I'm going to do is I'm going to log in to my AWS account. [The us-west-2.console.aws.amazon.com web site. The AWS services page is open.] Now we're going to use CloudFormation and EC2 as our tools to boot up a version of Puppet master. First what I want to do is kind of go over CloudFormation and then go over EC2. Now really the first thing that we're going to do is we have to create a key pair. [He clicks the EC2 option under the Compute heading in the content pane.] We need a key pair because eventually we're going to need to log in to our Puppet master instance and our Puppet agent instance. [The Resources page opens.] And if you don't already have a key pair, you need to create one. So I already have a key pair created that I can use if I want, but I'm going to create a new one just for the sake and the purpose of this video. [He clicks the Key Pairs link and the Create Key Pair opens in the content pane.]

So I'm going to click on Key Pairs and you're going to see that I have an existing one, but just for the sake of this video I'm going to create a new key pair. We can also import one. We can delete key pairs. You can even create one outside of Amazon if you want to. But in this case, I'm going to create a key pair in Amazon and then download it. [The Create Key Pair dialog box opens.] And I'm going to call this guy PuppetKeyPair and then click on Create. Now if you wait a second, we should get our PEM file downloaded and you see that on our lower left-hand side. So what you need to do is take this file and save it in a safe spot. And that's what you see here. What I did is I put it on my C drive and I put it in a folder called puppet and key. So you need to remember exactly where this key file is because we're going to need to get back to it sooner or later to log on to our instance. [He switches to the Notepad window.]

Now the next step is to log on to Quick Start and we can use a Quick Start template to boot up an instance of Puppet master. So if you could navigate to this URL aws.amazon.com/quickstart/ and I'll show you the template that you can use. So, if you want, you can put this in the hard way or you can use the existing template. [He switches to the aws.amazon.com web site.] Now let's go through Quick Starts. If you kind of scroll down for AWS Quick Starts is I can show you some of the premade templates that we can use.

Now not surprisingly we're going to use Puppet that you see kind of underneath DevOps a little bit to the left, the fourth one from the left you'll see Puppet. So what we're going to do is we're going to navigate to Puppet and then go to View guide or to Learn more. [He clicks the View guide link in the content pane and the Puppet on the AWS Cloud: Quick Start Reference Deployment opens in the content pane.] In this case, we're going to go to View guide. Now this is what I suggest you do. There are multiple guides on the Internet that you can use. I always suggest that you go to AWS and get the most current one because these things are updated all the time and if you use some other sense of navigation to get to it you may be using an old Quick Start guide. So always make sure you get the most current one like you see here right from AWS.

Now we can either view the template or we can launch the Quick Start guide. Now, if you launch the Quick Start guide, automatically AWS will get the template for you so you don't have to search for it. Like I mentioned previously, you can search for it if you like. It's going to take a little bit, you know, of time and imagination to find it. Or what you can do is you can just click on Launch Quick Start and you could have AWS just get the template for you. [The us-west-2.console.aws.amazon.com web site opens. The Create stack page is open in the content pane.]

And this is what it looks like. If you navigate down under Select Template, you're going to see the radio button where it says Specify an Amazon S3 template URL. What happened is Amazon got the Puppet template for you to use. That just saves you the time in actually locating it. You could have located it yourself if you wanted to. This just makes it easier. So, if you click on Next, you're going to get the Puppet stack, which is going to give you the Puppet master and two Puppet agents. You're going to get a Windows agent and a Linux agent. More on that a little bit later.

So I'm going to change my Stack name to something a little bit more meaningful – going to put in my initials and an underscore so I can just look at my initials and know this is the Puppet stack that I created. And I need to put in a key pair. Now this is the key pair that we specified earlier where we need to, actually, eventually connect to either an agent or a master.

Now for the source IP, for the remoting just put in zeros. This will allow an IP connection from anywhere. For the purposes of this video, that's just fine. We're going to make it as easy as possible, albeit skimp in a little bit of security just to get a little bit of simplicity. So the rest of the stuff you can leave as the defaults – the network configuration, the S3 stuff – and just click on Next. So you only need to supply the remote IP address which is going to be all zeros and the key pair and that should be enough. If you just click on Next, you should be able to just wait for Amazon to create your stack for Puppet.

Now as soon as you click on Next, you're going to have to wait about 20 minutes or so to actually build your stack. So what I'm going to do is rather than wait the full 20 minutes, we're going to kind of fast forward a little bit through the video and get to the very end so that way we just don't watch the status change for 20 minutes or so. [He clicks the Create button and the CloudFormation page opens.] But anyway, after you acknowledge that you want to build your Puppet stack click on Next, and what's going to happen is you're going to watch the status and the status is going to change while your stack is being created. So you should see, you know, a few things happening here. You should see CREATE_IN_PROGRESS, CREATE_COMPLETE, and you could ignore the ROLLBACK_COMPLETE because it's from a previous example that we can just ignore for what we're doing here. But eventually what's going to happen is you're going to have your three Puppet stack processes, which is going to be your Puppet master and two Puppet agents be complete.

So as long as you're monitoring it and you see CREATE_IN_PROGRESS and CREATE_COMPLETE, you're just fine. And once I said previously, this is probably going to take about 20 minutes or so. So just monitor it as it goes and when you see CREATE_COMPLETE for all of them, what's happened is you've completed creating your complete Puppet stack for the Puppet master and for the Puppet agent. So in this video, you learned how to use Amazon Web Services and EC2 to provision a Puppet stack, which includes a Puppet master and two Puppet agents.
Installing a Puppet Agent on AWS EC2

[Topic title: Installing a Puppet Agent on AWS EC2. The presenter is Bob Hendry.] In this video, I'm going to show you how you could configure two Puppet agents: a Windows agent and a Linux agent. [The aws.amazon.com web site opens.] Now a Puppet master is the central server for a Puppet topology, and it's used to configure Puppet agents. Now we could have multiple Puppet agents, [He clicks the Sign In to the Console button.] and here we're going to use two of them. [The us-west-2.console.aws..amazon.com web site opens.]

So I'm going to log in to Amazon Web Services, and then from here I can go either into EC2 or to CloudFormation. [He clicks the CloudFormation option in the content pane and the same opens in the web site.] So I'm going to go into CloudFormation to show you some events that occurred when I built my Puppet stack or my Puppet topology. Now, what I can do here is under my stack, I can choose the stack that I want to look at. Like in this case, RAH-Puppet, which is my initials and stack. And look at the Outputs, the Resources, the Overview, Events, Template, and anything that has to do with the stack creation or any events that have to do with the stack as it's currently running.

Now, if I want to take a look in more detail and look at, specifically, the Puppet master and the Puppet agents, is I have to go on EC2 to do that. So what I can do from this point is when I'm done looking at, you know, the Outputs, the Resources, the Events, and all the other good stuff that's associated with the cloud formation of my Puppet stack, I can go into EC2 and look at some more details. So I'm going to do that. I'm going to go to aws, [He clicks the AWS link and the home page opens.] which is going to get to my home page. And then from here, I'm going to navigate to EC2.

And you can also get EC2 from the Compute resources here, [He clicks the EC2 option and the same opens in the web site.] it's really the same link. So from EC2, I can take a look at my Running Instances and I have three of them. Now one of them is going to be my Puppet master, and two of them are going to be Puppet agents: a Windows agent and a Linux agent. [He clicks the Running Instances option and the Launch Instance opens in the content pane.] So when I click on resources, I can see Puppet in the middle, which is my master, and I see LinuxAgent and I see WindowsAgent. Now, if you want, you can do some editing for the name, and look at some of the resources for the name.

But in this case, we're going to need to know how to connect to our agents. Our LinuxAgent and our WindowsAgent. So what's useful is when you select each one of them, you can scroll down and look at some of the properties such as the public IP address and the URL. Because you're going to need to know this stuff to actually connect a little bit later. So if you like, you can click on the LinuxAgent and look at things such as the IP address. You can look at, you know, the Status Checks, Monitoring, Tags, or anything really, to get to know a little bit more about that agent.

Now it's already preconfigured to use the Puppet master, [He clicks the Actions drop-down list box.] but we're going to need to do things, such as, actually Connect to it. So if you click on Connect, you're going to see some options that you can use to connect to the Linux agent. [He clicks the Connect button in the content pane and the Connect To Your Instance box opens.] Now this pop-up is slightly incorrect. It's going to tell you that you can use SSH, or you could use, you know, a Java-enabled browser. Don't use the Java-enabled browser. It doesn't really work as well as you might think it does. You're going to use PuTTY to actually connect to your Linux agent. Even though it says that you can use Java SSH, I'll pass on that for now.

And also, this is slightly incorrect as well about using the key that you used previously to connect. You're going to have to convert a public key to a private key, and PuTTY for this to work. So what you're going to need to do is if you don't already have PuTTY, [He clicks the Close button and the box closes.] you're going to have to download PuTTY and get it installed on your machine. Now Windows is going to be a little bit easier. [He clicks the Actions drop-down list button.]

Now when you go to connect to Windows, it's going to download the remote access desktop, so we can access the Windows machine remotely. [He clicks the Connect button and the Connect To Your Instance box opens.] And, if you click on the Get Password, we're just going to specify here exactly where our key is and we can use the public key. So that's how you're going to connect to our instance in Windows. So in this video, you learned how to look at your stack, you learned how to use EC2 to look at your Puppet agent, you learned how to find out how to connect to your Linux agent and to your Windows agent.
Getting It All to Work

[Topic title: Getting It All to Work. The presenter is Bob Hendry.] In this video, I'm going to cover the final configuration steps that you're going to need to get the agent [The PuTTY release 0.70(64-bit) Setup wizard opens.] and the master all configured and working within Amazon Web Services. [He clicks the Next button.]

Now, the first thing I'm going to do is, we're going to go over the installation for PuTTY, [He clicks the Next button.] which is the tool that you're going to use – the SSH – into any of our Linux instances, either the master or an agent. [He clicks the Install button.] So if you don't already have PuTTY installed, I'm just going over the installation of PuTTY. It's a very simple install. We're going to need it to actually do the connection. So the install is actually straightforward. Just download PuTTY from the PuTTY site, and you could Google where to find it, [He clicks the Finish button and the wizard closes.] and go over the Windows installation.

Now the next thing we need to do is, [The PuTTY Key Generator box opens.] we need to convert our public key to a private key, because it doesn't support public keys as far as PuTTY goes. [He clicks the Load button on the box and the Load private key file explorer box opens.] So in the PuTTY Key Generator, navigate to where you created your public key. In my case it's under Skillsoft - puppet - key. And we want to get our key file which I call PuppetKeyPair.pem. So I want to open this up, and this was created in Amazon Web Services. And when I open it up, what's going to happen is the PuTTY Key Generator is going to warn me saying, alright, do you really want to take this key and convert it to a private key? And we do want to do so.

So let's click on the icon where it says save as a private key, and we'll leave the Key passphrase as blank for now, just to keep it simple. We don't want any human intervention to put the private key in and the passphrase, just for this example, just to keep it simple.

So when we save the private key, we're going to save it as a PPK file. Now put in exactly how the file name was for your public key. In this case, it was PuppetKeyPair.pem. And we're going to use the extension PPK. So let me take the file name and let me paste it in. And let me click on Save, and then your private key should be saved.

So at this point, what I need to do is go back into Amazon Web Services [He switches to the us-west-2.console.aws.amazon.com web site window.] and get some of my connection info. So I'm going to click on LinuxAgent, [He clicks the Connect button and the Connect To Your Instance box opens.] and now with my private key, I should be able to get my user ID and my public URL to use PuTTY to log in to my Linux instance.

So, as I said before, this is slightly incorrect as far as the example goes because it still uses the public key. But, what we do need to get here is, we need to get our username, which is Ubuntu, or we just get root. [He switches to the PuTTY Configuration box.] And then we get our public URL, we go into PuTTY. And under session, we put this in as our Host Name (or IP address). So I'm just going to go down to PuTTY, paste that in. It should be verbatim exactly like it is at Amazon. And the next thing we need to do is make sure we're using SSH and Port 22.

Now the next step is to go into the PuTTY Configuration and specify that private key. Otherwise, we're not going to be able to connect. Now you can do so by using PuTTY. And you could navigate down to Connection, and then SSH. And then from there you could go into Auth. And then from Auth, on the bottom part on the right-hand side, is you could specify the private key. [The Select private key file file explorer box opens.]

So click on Choose or Create, depending on your version. And we can navigate to that private key that we created with the keygen. Now, in this case again, it's under Skillsoft. And then navigate to puppet, and then to key, and then I choose my private key.

Now that should be it. [He closes the box.] It sounds like a lot, but once we're done doing it once, we're pretty much finished. So now what we can do is, we can use PuTTY to connect to our Linux instance. So as soon as I click on Open, you're going to get a scary message just saying that the key is not cached, just agree to this and you should be fine. Now, if everything goes well, [The ubuntu@linuxagent:~ window opens.] we should get our Linux command prompt, as you see here. So we've successfully connected to our Puppet agent. So we have our Puppet master, and now we've connected to our Puppet agent.

Now, the next thing to do is we need to connect out Windows Puppet agent as well. So we're going to navigate from here, [He switches to the us-west-2.console.aws.amazon.com web site window.] away from our command line, and back in the Amazon EC2. Now, in Amazon, to connect to our Windows agent is a little bit more straightforward. We don't need to use PuTTY to do so. We can use remote desktop.

So I'm going to click on WindowsAgent, and just like with the LinuxAgent, you can look at the Description, Status Checks, and all that other good stuff. [He clicks the Connect button and the Connect To Your Instance window opens.] But in our case, we want to Connect. So we need to get the password.

Now, to get the password, we click on the Get Password button. And we have to specify the path to our key pair that we specified earlier. And it even tells us what we called it, the PuppetKeyPair.pem, that's what we called it. So we need to check on the Choose File button, and then kind of pick the path where we had this key pair.

So we just navigate to where we put it. In this case, I'll navigate to the folder where we have puppet. And under puppet, I have key. Now I have the private pair that we used for Linux, and the public pair that we're going to use here for Windows.

So I click on Decrypt Password. I get my password. I can copy and paste it to the clipboard. I'm going to do so now. That way I can just paste it in when I do the remote desktop. So now I'm going to click on Download Remote Desktop File. So it's just as easy now. We're just clicking on the remote desktop and logging in.

So let me click on Connect and immediately it's going to ask us for our password. We have the root user, which is Administrator. I click on Remember me, and I click on OK. And I click on Yes here. Now, at this point, I should be able to remote in to this Windows session and create a Windows session in remote desktop.

So we'll give it a minute to kind of stir up. It takes about maybe 30 seconds or so. And then we should get Windows Server 2012, release number two. In the upper right-hand side, we should get that it is a Puppet agent. So we're successful.

So, in this video, we learned how to kind of get everything working with the Puppet agents, the Windows agent and the Linux agent, and the Puppet master.
Using the Facter Commands

[Topic title: Using the Facter Commands. The presenter is Bob Hendry.] In this video, I'm going to talk about facter commands. Now most operating systems have the concept of a global variable or an environmental variable. Now you have seen them if you worked in Windows or if you worked in Linux where you can basically set up, you know, either a global variable as an environment variable such as a path or like a Java path or an operating system. Now Puppet kind of works the same way but these are called facts. Now when a fact is in Puppet, a fact is something that tells you about the system. It tells you about the operating system, the URL, the number of days it's been up. And there's just really a ton of them. So if you want to look at a specific fact, [The ubuntu@linuxagent window opens.] what you do is you use the facter command. [He executes the facter operatingsystem command.]

Now what I'm going to start doing is I'm going to use just a couple of simple facter commands just to illustrate the point. For example, if I type in facter operatingsystem, what I'm going to get is I'm going to get the operating system for the system. Now in this case, this is a fact that Puppet maintains. Now these facts that Puppet maintains, again are very very similar to an environment variable or a global variable that you would see on other operating systems.

So in the second example, I'm going to type in facter fqdn to look at the fully qualified domain name. [He executes the facter fqdn command.] And I get linuxagent.example.com. [The 136763.txt file opens in the Notepad++ window.] So what I can do if I want is – in a manifest or a class or in any kind of Puppet code – what I can do is I can refer to those facts just as normal variables. Like here I've got a simple script that basically, what it does is that look to see what the OperatingSystem is equal to on line one. And OperatingSystem has a dollar sign in front of it. Now a dollar sign in front of an operator in Puppet denotes that it's a variable but it also denotes that if it's a fact. So in this case, on line one, $OperatingSystem is a fact. And I'm checking it equal to Linux. And if so, I'm setting a variable called message equal to this machine OS is of the type. And then I have the fact which is $OperatingSystem.

Else, what I'm doing on line four is I'm just setting the message – This machine is unknown. On line seven, I'm using a file resource to take a look at a specific file, in this case machineOperatingSystem.txt. I ensure that it's there on line eight and then I'm setting the content of that file on line nine equal to message or $message which in this case is not a fact, it's just a local variable. So basically facts and variables when in a manifest like this, really look the same. But the point is is I can get for example the operating system the fact, in this case, in the actual manifest. So what I can do is I can have some kind of code and some kind of branching additions here to look at specific fact information or system information about the specific system. So we can use facts in the way that we can basically, write like more flexible programs for configuration of Puppet. So in this video, you learned how to use facts and you learned how to use facter.
Using Core Puppet Facts

[Topic title: Using Core Puppet Facts. The presenter is Bob Hendry.] In Puppet, there are three different kinds of facts that you can use. You can use core facts, you can use custom facts, and you can use external facts. In this video, I'm going to show you a little bit more about facter and how we can look at core facts and how we can use them. [The ubuntu@linuxagent:~ window opens.] Now first what I'm going to do is just issue a command, info facter. [He executes this command.] And what this is going to do is it's going to bring up the facter manual where you could do things such as look at the NAME, the SYNOPSIS, and the USAGE. And the USAGE is pretty useful here because it gives us all the flags such as debug, help, puppet, version, yaml, json, and all the other good stuff. So this is where you would go to look at the factory documentation for facter.

Now, if you want to issue some commands, we're going to do that now. So I'm going to close the manual. And before we're going to look at some of the core facts, we're going to go over some useful facter commands. [He executes the facter --help command.] Our first thing, if you want to get help on facter, just issue facter and then help. And it's going to give you kind of what you saw in the info but it's going to be more in a help format. So you can look at things such as the debug, timing, puppet, version, yaml, json. Enable backtracing is pretty useful. And also for external directory when we're starting to use external facts.

Let me issue one more command here. Let me do facter and then put in version. [He executes the factor --version command.] This is important because you get to see what version of facter that you're using. Because depending on the version of facter that you're using, it might have slightly different functionality in the installation of Puppet. So in this case, I'm using 1.7.5 which I know is the most current version of facter so I'm good. So let's talk about core facts on a Puppet agent and a Puppet master. Now what a core fact is – is it's a fact that comes out of the box with Puppet. [He executes the clear command.] So let me clear my screen. And we can get a listing of all the core facts that we can look at, on this Linux agent. And this is a Puppet agent and it's a Linux machine.

Now your facts are going to be different depending on what operating system you're using. [He executes the facter command.] For example, you know, a Windows operating system is going to have different facts than Linux. So to look at all your core facts, all that you have to do is just type in facter. And you could see all of the core facts that belong to your local operating system and to your local Puppet installation. So what you can do at this point if you like is…I'm just going to scroll up just so you can just take a real quick glimpse of the facts that we have in this Puppet agent. Obviously, I'm not going to go over them one at a time but it's worth going over at least once just so you could see how the core facts are on a Puppet agent.

Now what I did now was, I toggled over to my Puppet master. It looked just like I went to my local machine but I actually went to a different UNIX box. Now on your Puppet master, you have facts as well. And you have the same facter commands that you can actually use. [He executes the facter command.] So in this case, I'm just going to issue facter. And we can look at all of the core facts that we have on the Puppet master. And you're going to see they're almost identical. They're slightly different ones in here because the machine is little bit different. It has a different operating system or a different operating system version. And also, since it's a Puppet master and not an agent, there are going to be some differences between the facts on this machine and the Puppet agent we just saw.

So anyway, in your Puppet installation, you have a Puppet master and you have Puppet agents. And all of them have facts. And in this case, what we did is we looked at the core facts and we used facter to do so. So in this video, you learned about core facts. You learned how to view core facts. And you looked up core facts on a Puppet master and a Puppet agent.
Using Custom Facts

[Topic title: Using Custom Facts. The presenter is Bob Hendry.] Now in Puppet, there are three different kinds of facts. You have the core facts. You have custom facts. And you have external facts. In this video, I'm going to show you how you can create and how you can use a custom fact. Now as you probably know the core facts are the few dozen or so facts, or the environment variables, or the global variables that ship with Puppet. You can also create your own. When you create your own facts, they're called custom facts. And you can create custom facts in a variety of different ways. So we're going to go over really the easiest way that you, as a Puppet developer, can create custom facts.

So the facts that you create could really be named anything. And you can create them on a Windows agent. You can create them on a Linux agent. You can create them on a Puppet master. Anywhere that you can run facter and you can use facter, you can create and you can use your own custom facts. Now these are useful if you have, for example, an environment variable or even probably a global variable that you may want to use, you know, in a manifest and use it globally in a manifest, you know, on your local Puppet agent or even possibly a Puppet master.

So let's go over the easiest way to actually create a custom fact. [The ubuntu@linuxagent:~ window opens.] So we're going to use the export command. When you use the export command, you put in FACTER, which is the facter command for export. And then you put in the name of the fact that you want to create. So in this case, I have FACTER_coolestteam and then I set it equal to the Cubs. [He executes the export FACTER_cooleststeam="Cubs" command.] So what's going to happen is FACTER_ is going to denote that this is a custom fact. And facter will create a fact, a custom fact, called coolestteam. Now let's create another one. I'm going to type in export FACTER_ and I will put in favorite…let's see, I'll put in favoritename and I'll put in equals and I'll put in Cassie. So I have two custom facts here. I have a fact called coolestteam [He executes the export FACTER_favoritename="Cassie" command.] and also a fact called favoritename.

Now, what I can do is I can use these facts in any manifest. And also, if I just did facter right now, I would be able to see each of these custom facts. I would be able to see coolestteam and I would be able to see favoritename. So rather than just list facter [He executes the facter coolestteam command.] and list all of them, I'm going to list them one at a time and so I can illustrate that this indeed worked. So, I just issued facter coolestteam and, not surprisingly, I get the value of my custom fact, [He executes the facter favoritename command.] which is Cubs. And then I type in facter favoritename and, not surprisingly, I get the value or the value pair of favoritename. [He opens the 136764.txt file in the Notepad++ window.]

So right now, what I can do is I can use coolestteam or favoritename in a manifest. Now in this manifest here, this is a code snippet that just does something as looking at the coolestteam. And I don't have the favoritename in here. So you don't have to look for it. But, basically, what I'm doing here is I'm looking at the coolestteam on line 1. Now coolestteam, as you saw, is a custom fact. It looks like a variable, though, because we have a variable on line number 2 where I'm setting message equals The Coolest Team is. And then, the fact, which is the coolestteam. So basically, a custom fact looks just like a core fact and that looks just like a regular variable. So in this video, you learned how to use facter to create your own custom facts and how to refer to your custom facts within a Puppet manifest.
Using the FACTERLIB Variable

[Topic title: Using the FACTERLIB Variable. The presenter is Bob Hendry.] Now in Puppet, there's more than one way that you can set and you could use custom facts. If you want to use custom facts in a more advanced way, what you can do is you can use FACTERLIB. Now FACTERLIB is, is it's really a fact in its own. It's an environment variable that we get to set with multiple different values from Ruby files from different folders if we so want to. So rather than kind of one off creating our custom facts, what we can do is we can use FACTERLIB to kind of hold all of them. Now it's a little bit more complex to do this but it's a little bit more flexible once you get the hang of it. So let's go over the steps in using FACTERLIB.

[The ubuntu@linuxagent:~ window opens. The 136766.txt file is open in the Notepad++ window. The code snippet is in the transcript for reference at the heading "step 1".] Now in step one, I'm illustrating here with this code example that basically FACTERLIB is an environment variable that can't really be set. So it's not like a regular fact that we can set in Puppet or a regular custom fact, if there is such a thing, that we can set in Puppet. But what we can do is we can create a couple Ruby files. And in those Ruby files is we can use some FACTERLIB commands or some factor commands to set different values or to set custom values for FACTERLIB. [The code snippet is in the transcript for reference at the heading "step 2".] So in step two, what I'm doing is I'm creating a folder structure and I have two different Ruby files. I have longest_river.rb and longest_wall.rb. So in those files, what I'm going to do is I'm going to add a Factor.add piece of code. So on line 15, [Code starts: Facter.add('longest_river') do. Code ends.] we see Facter.add and then we're creating a custom fact called 'longest_river'. And that's going to be set to "echo Nile" that you're going to see on line number 16. [Code starts: setcode "echo Nile". Code ends.] And on line number 20, [Code starts: Facter.add('longest_wall') do. Code ends.] what I am doing here is in the testing file, the Ruby file, I'm adding another custom fact. I'm putting in Facter.add and then longest_wall "echo 'China Wall'". So basically what I'm doing here is all my Ruby files that are in this folder structure eventually are going to be added to FACTERLIB.

And we do that with an export statement. So we see this illustrated on step number four where we're doing the export. [The code snippet is in the transcript for reference at the heading "step 4"] And you could go over the syntax there and that's why I'm showing it to you in Notepad++ rather than at the command line because otherwise it's going to wrap around and you're not going to see it very well. But basically on line number 26 and line number 28, what I am doing is I'm issuing two exports and I'm exporting the path for those Ruby files. And then we could test it on line number 30. [Code starts: Test the new facter. Code ends.] So I'm putting in, you know, longest_river, I get Nile. And then on line number 33, [Code starts: open square bracket root@puppetagent1 / close square bracket# facter longest_wall. Code ends.] I'm typing in facter longest_wall and there I'm getting China. So as you can see here in this video, you learned how to use FACTERLIB to write more robust custom facts that you can use in your Puppet application. And again, it's a little bit more complex than you would do it in a regular export.

"step 1"

Env can not be set
[root@puppetagent1 facter]# env | grep "FACTERLIB"
[root@puppetagent1 facter]#

"step 2"

Create folders
[root@puppetagent1 tmp]# tree /tmp/test_facts/
/tmp/some_facts/
vipin
longest_river.rb
testing
longest_wall.rb

"step 4"

Use the export statement
[root@puppetagent1 /]# export
FACTERLIB = "/tmp/some_facts/river:/tmp/some_facts/wall"
[root@puppetagent1 /]# env | grep "FACTERLIB"
FACTERLIB = /tmp/some_facts/river:/tmp/some_facts/wall
Using External Facts

[Topic title: Using External Facts. The presenter is Bob Hendry.] Now, out of the three different types of facts in Puppet, we have custom, we have core, and we have external. External is kind of the one that's a little bit, the most hard to get your hands around, because that's the most complicated. But external facts are used for if you want to get some sort of like run time configuration. Or basically, you know, when something starts up, or just an instance comes to life. If you want to get a fact based on something that just kind of spins up, you would use an external fact. So, in the rest of this video, I'm going to show you how external facts work. And how you can basically configure external facts, and so you can understand them a little bit more properly. So on this code example, I have a step-by-step approach, in how we can use external facts. [The 136767.txt file is open in the Notepad++ window. The ubuntu@linuxagent:~ window also opens.] First of all, in step number one, on line one, on the Puppet agent, what I'm going to do is, I'm going to create a directory. [The code snippet is in the transcript for reference at the heading "step 1".]

In this case, I'll make the directory, and from my current directory, etc/facter, and I'm going to create a file called facts.d. Now, in here, what I'm going to do is, I'm going to create a Shell script in that folder. And you're going to see that illustrated on set number four. [Code starts: Create a Shell script in the directory. Code ends.] Now I have the code example in Notepad++ because the output that we are going to get from some of this is going to be really really long and it's going to scroll and it's not going to look very concise. So basically what I'm doing then is on step number five, or on line number five, [Code starts: -- with the following content. Code ends.] what I'm doing is I'm adding the following content. So I'm doing an ls -l /etc/facter/facts.d. I need, at this point, to set the value within that Shell script, so what I'm going to do here is on line number eight is I have external-factstest.sh. [Code starts: -rwxrwxrwx. 1 root root 65 Sep 18 13:11 external-factstest.sh. Code ends.] And I'm just going to put in a couple of things here. I'm going to put in echo "hostgroup = dev" and then on line 12, echo "environment = development".

So basically, in the Shell script, that I have named external-factstest.sh for Shell script, what I'm doing is I'm defining two external facts that you see on line 11 [Code starts: echo "hostgroup = dev". Code ends.] and on line 12. One of the facts is called hostgroup, and another of the facts is called environment. So that leads us now to the next step, step number three, which you see illustrated here on line 14. [Code starts: Change the permission of the script file. Code ends.] And basically, all that step is doing is changing the permission of the script file. Fairly easy stuff. Now what we can do is we can test it, which we see on line number 17. [Code starts: Once done, we can now see the variable present. Code ends.] On line 17, all I need to do is issue my facter commands, which you see on line 19 [Code starts: $ facter hostgroup. Code ends.] and line number 21. [Code starts: $ facter environment. Code ends.] So I'm doing, issuing a facter hostgroup, and I'm getting dev, and then I'm getting a facter environment, and then displaying development. So, in this video, you learned a little bit about external facts, and how to write external facts, how to write a Shell script to contain external facts, and then how to test your external facts.

"step 1"

On the agent machine, we need to create a directory $ mkdir -p /etc/facter/facts.d
Exercise: Use Puppet

[Topic title: Exercise: Use Puppet. The presenter is Bob Hendry.] In this exercise, you will create an Amazon Web Services or an AWS account, provision an EC2 server, install Puppet master, configure Puppet master, install Puppet agent, and finally configure Puppet agent. Now pause the video and come up with your solution. After you come up with your solution, resume the video and compare your solution to what I came up with. Hello and welcome back. Did you come up with your solution? Let's compare your solution to what I came up with. [The aws.amazon.com web site opens. The Puppet on the AWS Cloud; Quick Start Reference Deployment page is open.] Now there's more ways to do this than one, and some steps can actually be combined. So the first thing we're going to do, is we're going to go to the Quick Reference Guide. [He clicks the My Account drop-down list button.]

And, from here, what we can do, is we could log in to the AWS Management Console, and if you don't have an Amazon account, all is you need to do is go to the Management Console and sign up for one. So get your credit card out, and it's pretty intuitive. I already have an account, so I'm going to skip that step. But it's pretty intuitive, and you've seen these steps before if you signed up for anything. No real surprises here. [He clicks the PDF link and the aws-quickstart.s3.amazonaws.com web site opens.] So, at this point, we can click on the Quick Start Guide and go over the instructions for the stack creation for Puppet master and for AWS Cloud for Puppet.

Now, we can use a pre-existing AWS template to do this, which will actually configure our Puppet master and our Puppet agent, and then provision them on two EC2 servers, kind of all of one step. So all is we need to do is click on Launch Quick Start, and immediately we're going to log into the console, [The CloudFormation page opens in the us-west-2.console.aws.amazon.com web site.] and Amazon is going to select our template for us. Now, we could have manually done this, if we wanted to go to S3 and get the template ourselves, but that's too much work. It's a lot easier just to do this. And you can see the template that we're using, here on the bottom, right where it says Choose a template. So, at this point, we can click on Next, [He clicks this button and the Create stack page opens in the us-west-2.console.aws.amazon.com web site.] and really just go through the Wizard.

The only thing that we really need to supply here is maybe your name, and I'm going to call this guy LABPuppet, [He types LAB-Puppet in the Stack name text box.] so it doesn't bump into anything else that I have, you know, currently running an AWS. We need to select the PuppetkeyPair. [He clicks this option from the Select a key pair drop-down list box.] Now you can configure a key pair, or what you can do is just use an existing one. Here, I'm just going to use one I've already created. And, for the source IP for remote access, just put in all zeroes. We're just going to be able to allow connection from anywhere on the Internet for now.

A little bit of a security breach, but just to keep it simple, we'll just do it this way. [He clicks the Next button.] We click on Next and immediately what will happen, is it'll go to the next screen. And we click on Next again, and we need to agree to all the conditions, so give this box a check. And then lastly, we just need to click on Create. [He clicks the Create button.] Now, at this point, [The CloudFormation page opens.] our master will be provisioned, and two agents will be provisioned. We'll have a Linux agent and a Windows agent. Now it should take about 20 minutes to actually go through the provisioning process. So we're going to speed things up a little bit.

But everything should go fine. We should get a complete create or CREATE_COMPLETE, and that means that our master has been configured, and our agents have been configured. Again, we have three different machines, we have two Puppet agents, and a Puppet master. And our stack does the configuration for us, we don't have to do a manual installation, or any kind of manual configuration. All is we need to do here is just issue commands to connect to each of these instances, and then to do things, such as supply manifest or build classes, but that's beyond the scope of what we're doing here.

Right now we just want to provision a Puppet master and a couple of Puppet agents. So we should see now that everything is being completed. You can ignore some of the other stuff that I have here because this is some of the other servers I have running. So you could see that our three were created. [He clicks the aws link and the AWS services page opens in the web site.] So the next thing is to look an EC2. [He clicks the EC2 option and the Resources page opens.] And we can monitor these servers and make sure they're provisioned and running. So I'm going to click on the EC2 link, and we should see all my EC2 instances running here. So I have three of them that are already running prior to doing this lab exercise, so we're going to ignore those for now, and just concentrate on the three that we provisioned as part of this exercise.

So, to do that, it's going to be a little bit tricky, but we can scroll all the way to the right and determine which instances that we just spun up just by the date and the time. So, as you can see here, we got a couple Puppet masters, we have a couple Linux agents, and a couple Windows agents. So let's see the ones that are ours, and then what we can do is we can issue the commands via PuTTY to log in to them if we want to do things, such as, you know, further configure these instances, either the agent, the Linux agent, or the Windows agent, or even go into the Puppet master. So we're almost complete. So, at this point, we can look at the launch time and determine which ones we just launched, and we can see them on the bottom.

We have the Puppet, the Windows agent, and the Linux agent. So I'm going to choose Puppet, and then from here I can look at the connect parameters. And the next step would be, after this lab, I would want to, you know, install PuTTY if I don't already have it installed, and then install PuTTY and configure the actual Puppet master if I want to. The same with Windows agent, we're going to use remote desktop later if you want to log in to the Windows agent to be able to, you know, maybe connect to the Puppet master. And also the Linux agent, which I'm going to highlight here below.

So, on the Linux agent, we have more of the same. We have all of the connection information that we could use in PuTTY, or we can use a Java-based browser, which I would actually suggest against using. So, if your solution looks like this, it's similar to mine, you're just fine. So congratulations, you've just configured a Puppet master and two Puppet agents.
